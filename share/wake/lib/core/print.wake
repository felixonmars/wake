# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package wake

# format: render any type into a printable String
#
#   format 44        = "44"
#   format "Hello"   = "\"Hello\""
#   format "\n"      = "\"\\n\""
#   format (seq 4)'  = "0, 1, 2, 3, Nil"
#   format pi        = "3.1415926535897931"
#   format (Pass 33) = "Pass 33"
#   format True      = "True"
#   format (_)       = "<source-file.wake:line:column>"
export def format (anyType: a): String =
    def p x = prim "format"
    p anyType

# LogLevel is a user-opaque type.
# To construct a LogLevel, use makeLogLevel.
data LogLevel = LogLevel (name: String)
from wake export type LogLevel

# getLogLevelName: return the name of the LogLevel
export def getLogLevelName (LogLevel name): String =
    name

# These colours are available for use with LogLevels
export data Colour =
    Black
    Red
    Green
    Yellow
    Blue
    Magenta
    Cyan
    White

# makeLogLevel: define a new log level
export def makeLogLevel (name: String) (colour: Option Colour): LogLevel =
    def set name code = prim "colour"
    def code = match colour
        None         = 9
        Some Black   = 0
        Some Red     = 1
        Some Green   = 2
        Some Yellow  = 3
        Some Blue    = 4
        Some Magenta = 5
        Some Cyan    = 6
        Some White   = 7
    def _ = set name code
    LogLevel name

# The standard logging levels used in wake

# logError: logged to stderr by default
export def logError: LogLevel =
    makeLogLevel "error" (Some Red)

# logWarning: logged to stdout unless run with -q
export def logWarning: LogLevel =
    makeLogLevel "warning" (Some Yellow)

# logEcho: logged to stdout when run with -v
export def logEcho: LogLevel =
    makeLogLevel "echo" None

# logInfo: logged to stdout when run with -v
export def logInfo: LogLevel =
    makeLogLevel "info" None

# logDebug: logged to stdout on debug
export def logDebug: LogLevel =
    makeLogLevel "debug" (Some Blue)

# logNever: not logged to any stream
export def logNever: LogLevel =
    makeLogLevel "null" None

# tap: inject a diagnostic into a pipeline
# Oftern used in conjunction with println and/or format.
#
#   def foo =
#     "123123"
#     | tap (println "DEBUG; I SAW: {format _}")
#     | int
#     | getOrElse 0
export def tap (consumerFn: a => b) (value: a): a =
    def _ = consumerFn value
    value

# printLevel: print a String on the given LogLevel.
#
#   # Produce a red hello on stderr
#   def Unit = printLevel logError "hello\n"
export def printLevel (LogLevel name): String => Unit =
    def p stream outputStr = prim "print"
    p name

# printlnLevel: print a String with a newline on the given LogLevel.
#
#   # Produce a yellow hello on stdout unless run with -q
#   def Unit = printlnLevel logWarning "hello"
export def printlnLevel (level: LogLevel): String => Unit =
    def f = printLevel level
    (\outputStr f "{outputStr}\n")

# print: print a colourless String, visible when run with -v.
#
#   # Print a diagnostic visible when run with -v
#   def Unit = print "hello world\n"
export def print: String => Unit =
    printLevel logInfo

# println: print a colourless String with a newline, visible when run with -v.
#
#   # Print a happy face visible when run with -v
#   def Unit = println "{integerToUnicode 0x1f600}"
export def println: String => Unit =
    printlnLevel logInfo
