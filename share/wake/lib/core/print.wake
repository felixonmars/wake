# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package wake

# Any => String conversion
export def format any = prim "format"

# LogLevel is an opaque type
from wake export type LogLevel
data LogLevel = LogLevel (name: String)

# LogLevel => String
# Get a printable value for a LogLevel
export def getLogLevelName (LogLevel name) = name

# The colours available for use with LogLevels
export data Colour =
  Black
  Red
  Green
  Yellow
  Blue
  Magenta
  Cyan
  White

# Define a new log level
export def makeLogLevel name colour =
  def set name code = prim "colour"
  def code = match colour
    None         = 9
    Some Black   = 0
    Some Red     = 1
    Some Green   = 2
    Some Yellow  = 3
    Some Blue    = 4
    Some Magenta = 5
    Some Cyan    = 6
    Some White   = 7
  def _ = set name code
  LogLevel name

# The standard logging levels used in wake
#   logError   goes to stderr
#   logWarning goes to stdout unless quiet
#   logEcho    goes to stdout on verbose
#   logInfo    goes to stdout on verbose
#   logDebug   goes to stdotu on debug
export def logError   = makeLogLevel "error"   (Some Red)
export def logWarning = makeLogLevel "warning" (Some Yellow)
export def logEcho    = makeLogLevel "echo"    None
export def logInfo    = makeLogLevel "info"    None
export def logDebug   = makeLogLevel "debug"   (Some Blue)
export def logNever   = makeLogLevel "null"    None

# Useful helper method for inserting a debug step into a pipeline
# def foo = "123123" | tap (println "that: {format _}") | int | getOrElse 0
export def tap consumerFn value =
  def _ = consumerFn value
  value

# Print with a given verbosity
export def printLevel (LogLevel name) =
  def p stream outputStr = prim "print"
  p name

export def printlnLevel level =
  def f = printLevel level
  (\outputStr f "{outputStr}\n")

# Print any type to stdout; even exceptions
export def print   = printLevel logInfo
export def println = printlnLevel logInfo
