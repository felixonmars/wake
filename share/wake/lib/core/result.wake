# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package wake

# Functions which may fail should return the `Result a Error` type.
# This allows the caller to distinguish between Pass and Fail.
# Appropriate use of the `require` keyword can chain Results together.
#
# def doubleIntegerFromFile path =
#     # The 'read' function returns a Result String Error
#     # If the 'read' function returns Pass, proceed to the next line.
#     # Otherwise, doubleIntegerFromFile returns the same Fail as read.
#     require Pass contents = read path
#
#     # Try to convert the String into an Integer.
#     # If successful, extract the value for use in the rest of the function.
#     # If unsuccessful, construct an appropriate message for the Fail case.
#     require Some integer = int contents
#     else failWithError "{contents} is not an Integer"
#
#     # Assuming both previous requirements are met, return Pass.
#     # Callers of doubleIntegerFromFile can then use `require Pass x` themselves.
#     Pass (integer * 2)
export data Result pass fail =
    Pass pass
    Fail fail

# isPass: report if the Result was a Pass
#
#   isPass (Pass 123) = True
#   isPass (Fail 123) = False
export def isPass: Result a b => Boolean = match _
    Pass _ = True
    Fail _ = False

# isFail: report if the Result was a Fail
#
#   isFail (Pass 123) = False
#   isFail (Fail 123) = True
export def isFail: Result a b => Boolean = match _
    Pass _ = False
    Fail _ = True

# getPass: retrieve the Pass value else None
#
#   getPass (Pass 123) = Some 123
#   getPass (Fail 123) = None
export def getPass: Result a b => Option a = match _
    Pass x = Some x
    Fail _ = None

# getFail: retrieve the Fail value else None
#
#   getFail (Pass 123) = None
#   getFail (Fail 123) = Some 123
export def getFail: Result a b => Option b = match _
    Pass _ = None
    Fail x = Some x

# getWhenFail: retrieve the Pass value, using a default value for Fail
#
#   getWhenFail 42 (Pass 123) = 123
#   getWhenFail 42 (Pass 123) = 42
export def getWhenFail (default: pass): Result pass fail => pass = match _
    Pass a = a
    Fail _ = default

# getWhenPass: retrieve the Fail value, using a default value for Pass
#
#   getWhenPass 42 (Pass 123) = 42
#   getWhenPass 42 (Pass 123) = 123
export def getWhenPass (default: fail): Result pass fail => fail = match _
    Pass _ = default
    Fail f = f

# rmap: apply a function to a Pass-ing result
# If you find yourself using the function, consider using require instead.
#
#   rmap (_+1) (Pass 123) = Pass 124
#   rmap (_+1) (Fail 123) = Fail 123
export def rmap (fn: a => b): Result a fail => Result b fail = match _
    Pass a = Pass (fn a)
    Fail f = Fail f

# rmapPass: apply a fallible function a Pass-ing result
# If you find yourself using the function, consider using require instead.
export def rmapPass (fn: a => Result b fail): Result a fail => Result b fail = match _
    Pass a = fn a
    Fail f = Fail f

# Applies a fallible function to Fail value or propogates Pass
# If you find yourself using the function, consider using require instead.
export def rmapFail (fn: a => Result pass b): Result pass a => Result pass b = match _
    Pass a = Pass a
    Fail f = fn f

# findFail: if all the List elements are Pass return the contents else the first Fail
#
#   findFail (Pass 456, Pass 123, Nil) = Pass (456, 123, Nil)
#   findFail (Pass 456, Fail "xyz", Fail "abc", Nil) = Fail "xyz"
export def findFail: List (Result a b) => Result (List a) b =
    findFailFn (_)

# findFailFn: if fn returns Pass for all List elements, return the outputs else Fail
# Once a Fail is found, fn is not evaluated on further elements.
# This means that fn is applied to the List mostly sequentially.
# If more parallelism is desired, use 'map fn | findFail' instead.
#
#   def toInt x = int x | getOrFail "not an Integer ({x})"
#   findFailFn toInt ("456", "123", Nil) = Pass (456, 123, Nil)
#   findFailFn toInt ("_56", "123", Nil) = Fail "not an Integer (_56)"
export def findFailFn (fn: a => Result b fail): List a => Result (List b) fail =
    def helper = match _
        Nil  = Pass Nil
        h, t =
            require Pass x  = fn h
            require Pass tt = helper t
            Pass (x, tt)
    helper

# findPass: if all the List elements are Fail return the contents else the first Pass
#
#   findPass (Fail 456, Fail 123, Nil) = Fail (456, 123, Nil)
#   findPass (Fail 456, Pass "xyz", Pass "abc", Nil) = Pass "xyz"
export def findPass: List (Result a b) => Result a (List b) =
    findPassFn (_)

# findPassFn: if fn returns Fail for all List elements, return the outputs else Pass
# Once a Pass is found, fn is not evaluated on further elements.
# This means that fn is applied to the List mostly sequentially.
# If more parallelism is desired, use 'map fn | findPass' instead.
#
#   def toInt x = int x | getOrFail "bad: {x}"
#   findPassFn toInt ("_56", "123", "777", Nil) = Pass 123
#   findPassFn toInt ("_56", "_23", "_77", Nil) = Fail ("bad: _56", "bad: _23", "bad: _77", Nil)
export def findPassFn (fn: a => Result pass b): List a => Result pass (List b) =
    def helper = match _
        Nil = Fail Nil
        h, t =
            require Fail x  = fn h
            require Fail tt = helper t
            Fail (x, tt)
    helper

# panic: tell the wake interpreter that something is impossible.
# >>>>>> THIS FUNCTION IS NOT INTENDED TO STOP A BUILD! <<<<<<<<
# >>>>>>>>>>>>> To report rrrors use a Result <<<<<<<<<<<<<<<<<<
#
# # An example of a legitimate use of panic:
# def hasUniqueMinimum list =
#   match (sortBy (_<_) list)
#     Nil     = False
#     x, Nil  = True
#     x, y, _ = match (x <=> y)
#       LT = True
#       EQ = False
#       GT = panic "Sorted list is not sorted"
#
# # Here is an example of why you should never use panic for error reporting:
# # The optimizer can legally remove panics (they are by definition unreachable).
# # Furthermore, the optimizer can even eliminate code that coexists with a panic.
# def myFun x =
#   def _ = panic "stop the program"
#   42 + x
#
# $ wake --no-optimize -x 'myFun 33'
# PANIC: stop the program
# $ wake -x 'myFun 33'
# 75
#
# ... but a future version of wake might return 0 or 20 or "hello world"!
# If you tell the interpreter the body of myFun is unreachable, myFun is undefined.
export def panic (str: String): a =
    def f x = prim "panic"
    f str

# stack: dump a stack trace from the call site
# This function currently only works with debug mode enabled.
export def stack Unit: List String =
    def f x = prim "stack"
    f Unit

# An Error has a cause and a stack trace
# Result types should generally use an Error for their Fail case.
export tuple Error =
    export Cause: String
    export Stack: List String

# makeError: create an Error with the specified cause
# This captures the stack at the point of the makeError call.
export def makeError (cause: String): Error =
    Error cause (stack Unit)

# addErrorContext: add a prefix to the cause string of a Fail-ure
# This method can be useful to preserve an existing failure cause,
# where using a require-else must supply a totally new cause.
#
# require Pass contents =
#     read file
#     | addErrorContext "opening {file.getPathName}"
export def addErrorContext (prefix: String): Result a Error => Result a Error = match _
    Pass x = Pass x
    Fail (Error cause stack) = Fail (Error "{prefix}: {cause}" stack)

# failWithError: produce a Fail for us in error conditions
#
#   require Some = int str
#   else failWithError "Could not parse {str} as an Integer"
export def failWithError (cause: String): Result a Error =
    Fail (makeError cause)
