# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package wake

# Syntax helpers

# Flip function and argument order.
# fn obj.getXYZ = fn (getXYZ obj)
export def (argument: a) . (memberFn: a => b): b =
    memberFn argument 

# Flip function and argument order.
# seq 10 | map str | catWith " " = catWith " " (map str (seq 10))
export def (argument: a) | (pipeFn: a => b): b =
    pipeFn argument

# Avoid ()s without changing order.
# catWith " " $ map str $ seq 10 = catWith " " (map str (seq 10))
export def (dollarFn: a => b) $ (argument: a): b =
    dollarFn argument

# The ring operator is used to denote the composition of functions.
# (f ∘ g) x = f (g x)
export def (f: b => c) ∘ (g: a => b): a => c =
    \x f (g x)

# Allows flipping the parameters of a function.
# icmp.flip 4 5 = GT
# icmp.flip 5 4 = LT
export def flip (f: a => b => c) (x: b) (y: a): c =
    f y x

# Wait for 'x' to be computed before invoking (f x).
# If 'x' is a list, f will run once 'x' can be distinguished between Nil and (_, _).
# Normally, 'f x' may invoke 'f' before even this basic fact is known.
# You generally only need 'wait' when interfacing with other wake primitives.
# Therefore, ask a wake expert before you resort to using this function.
# The correct way to sequence events is by consuming the results of prior events in later events.
# A 'match x' expression on list 'x' with different case results also acts like 'wait'.
export def wait (f: a => b) (x: a): b =
    def imp x = prim "true"
    match (imp x)
        True  = f x
        False = panic "unreachable"
