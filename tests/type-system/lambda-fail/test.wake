# Type error; function '"{x}"' (test.wake:5:[24-28]) expected argument of type:
#     String
#   but was supplied argument 'x' (test.wake:5:26) of type:
#     Integer
def f0 = \(x: Integer) "{x}"
# Pattern for case 'Pair' expected type:
#     Pair Integer String
#   but the argument test.wake:10:[11-61] has type:
#     Pair String String
def f1 = \(Pair (x: Integer) (y: String): Pair String String) "{str x}-{y}"
# Type error; function '"{x}-{y}"' (test.wake:15:[63-71]) expected argument 'x' of type:
#     String
#   but was supplied argument '(x: Integer)' (test.wake:15:[17-28]) of type:
#     Integer
def f2 = \(Pair (x: Integer) (y: String): Pair String String) "{x}-{y}"
# Unbound type variable at 'a' (test.wake:17:15)
def f3 = \(x: a) x
#Type error; expression 'f4 (Pair x y)' (test.wake:22:[5-17]) of type:
#    Integer
#  does not match explicit type ascription at test.wake:22:[20-25] of:
#    String
def f4 (Pair x y): String = x + y
#Type error; function 'x + y' (test.wake:27:[73-77]) expected argument 'y' of type:
#    Integer
#  but was supplied argument '(y: String)' (test.wake:27:[27-37]) of type:
#    String
def f5 (Pair (x: Integer) (y: String): Pair Integer Integer): Integer = x + y
#Pattern for case 'Pair' expected type:
#    Pair Integer Integer
#  but the argument test.wake:32:[5-60] has type:
#    Pair Integer String
def f6 (Pair (x: Integer) (y: Integer): Pair Integer String): Integer = x + y

# Should never run!
export def test _ =
    def _ = f0
    def _ = f1
    def _ = f2
    def _ = f3
    def _ = f4
    def _ = f5
    def _ = f6
    Pass 0
