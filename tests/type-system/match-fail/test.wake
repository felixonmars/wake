#Introduced type variable 'a' (test.wake:3:16) is not free; it has type:
#    Unit
export def f0: a => a = match _
  x: Unit = x

#Type error; expression test.wake:[10-11]:[35-13] of type:
#    Unit => Unit
#  does not match explicit type ascription at test.wake:10:[16-31] of:
#    String => String
export def f1: String => String = match _
  x: Unit = x

#Introduced type variables 'a' (test.wake:14:16) and 'b' (test.wake:14:21) are actually the same.
export def f2: a => b = match _
  x = x

#Introduced type variable 'a' (test.wake:19:16) is not free; it has type:
#    Integer
export def f3: a => Boolean = match _
  0 = True
  _ = False

#Type error; expression test.wake:[27-30]:[36-11] of type:
#    Integer => Boolean
#  does not match explicit type ascription at test.wake:27:[16-32] of:
#    String => Boolean
export def f4: String => Boolean = match _
  0 = True
  _ = False

#Type error; function 'True' (test.wake:36:[15-18]) expected argument of type:
#    Integer
#  but was supplied argument '0' (test.wake:36:3) of type:
#    String
export def f5 = match _
  0: String = True
  _ = False

#Pattern for case 'Pair' expected type:
#    Pair (Pair Integer String) Boolean
#  but the argument 'x' (test.wake:43:62) has type:
#    Pair (Pair String String) Boolean
export def f6 (x: Pair (Pair String String) Boolean) = match x
  Pair (Pair i s) True  = "{str i}-{s}T"
  Pair (Pair i s) False = "{str i}-{s}F"

#Type error; expression '(_: Double)' (test.wake:53:[14-24]) of type:
#    String
#  does not match explicit type ascription at test.wake:53:[18-23] of:
#    Double
export def f7 = match _
  Pair True  (_: String) = 42
  Pair False (_: Double) = 43

#Type error; function 'f8' (test.wake:61:[9-10]) expected argument of type:
#    Unit
#  but was supplied argument '8' (test.wake:61:12) of type:
#    Integer
export def f8: Unit => Unit = match _
  x = x
def _ = f8 8

# If this runs, we have a problem:
export def test _ = Pass 0
